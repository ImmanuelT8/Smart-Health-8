Änderungen und Anpassungen:
1. Hinzufügen und Anpassen der smooth_data Funktion:
Die Funktion smooth_data wurde definiert, um eine Sequenz von Datenpunkten zu glätten, indem für jedes Fenster von drei aufeinanderfolgenden Datenpunkten der Mittelwert berechnet wird.
Die Funktion akzeptiert nun einen optionalen Parameter previous_remainder, der die letzten beiden Datenpunkte des vorherigen Arrays enthält und in das aktuelle Array integriert werden kann.
Die Funktion gibt sowohl die geglätteten Daten (smoothed_data) als auch die letzten beiden Datenpunkte des verarbeiteten Arrays (remainder) zurück, die für den nächsten Durchlauf verwendet werden sollen.
python
Code kopieren
# -*- coding: latin-1 -*-
import numpy as np

def smooth_data(data, previous_remainder=None):
    if previous_remainder is not None:
        data = np.concatenate((previous_remainder, data))

    smoothed_data = []
    remainder = data[-2:]

    for i in range(len(data) - 2):
        window = data[i:i + 3]
        mean_value = np.mean(window)
        smoothed_data.append(mean_value)

    return smoothed_data, remainder
2. Anpassen der update_plot_data_mean_filter Methode:
Die Methode update_plot_data_mean_filter wurde angepasst, um den remainder der geglätteten Daten zu verwenden.
Der remainder wird nun als Attribut der Klasse (self.remainder) gespeichert und bei jedem Aufruf der Funktion smooth_data übergeben.
python
Code kopieren
def update_plot_data_mean_filter(self):
    print("Update Plot Data Mittelwert")
    from safe_to_excel import df
    IR_raw_list = df['Red'].tail(SAMPE_ARRAY).astype(float)  # Gibt die letzten 100 Werte aus
    IR_raw_list.reset_index(drop=True, inplace=True)  # Setze den Index zurück, damit beginnen wir beim Index 0

    # Daten glätten, wobei der vorherige remainder verwendet wird
    IR_smooth_list, self.remainder = smooth_data(IR_raw_list, getattr(self, 'remainder', None))

    # Geplättete Daten plotten
    self.plot_smoothed_data(IR_smooth_list)
3. Anpassen der plot_smoothed_data Methode:
Die Methode plot_smoothed_data wurde angepasst, um die geglätteten Daten korrekt zu plotten.
Die Methode übernimmt die geglätteten Daten (smoothed_data) und aktualisiert den Plot.
python
Code kopieren
def plot_smoothed_data(self, smoothed_data):
    index = 0  # Startindex für den Datenabruf
    while index < SAMPE_ARRAY:
        data_point = smoothed_data[index]  # Datenpunkt für den aktuellen Index

        print(f"Glätteter Datenpunkt {index + 1}: {data_point}")  # Datenpunkt printen

        self.data = np.roll(self.data, -1)  # Verschiebt oder rollt die Elemente des Arrays um eine Position
        self.data[-1] = data_point  # Setzt den Datenpunkt an das Ende des Arrays
        self.plot_item.setData(y=self.data)  # Aktualisieren der Daten des Plot-Items

        pg.QtCore.QCoreApplication.processEvents()  # Aktualisieren des Plot-Widgets
        time.sleep(0.017)  # Pause von 10 Millisekunden

        index += 1
Zusammenfassung:
Die Funktionalität zum Glätten von Daten mit einem Mittelwertfilter wurde implementiert.
Der remainder der Daten wird verwendet, um die Glättung über mehrere Datenfenster hinweg konsistent zu halten.
Die Methoden wurden entsprechend angepasst, um die geglätteten Daten korrekt zu plotten und anzuzeigen.


#### Verwendung der remainder funktion ####

Ja, die remainder-Werte (die letzten beiden Datenpunkte des vorherigen Arrays) werden an den Anfang des neuen Arrays angefügt, um eine kontinuierliche Glättung über mehrere Datenfenster hinweg zu ermöglichen. Dies stellt sicher, dass keine Daten verloren gehen und die Glättung konsistent bleibt, wenn neue Daten hinzukommen.

Hier ist der Prozess im Detail:

Initialisierung des previous_remainder:

Beim ersten Aufruf von smooth_data ist previous_remainder None.
Für nachfolgende Aufrufe wird der remainder des vorherigen Aufrufs übergeben.
Konkatenation des previous_remainder mit dem neuen Datenarray:

Falls previous_remainder nicht None ist, wird es an den Anfang des neuen Datenarrays angefügt.
Dadurch enthält das Datenarray die letzten beiden Datenpunkte des vorherigen Arrays und die neuen Datenpunkte.
Berechnung der geglätteten Daten:

Für jedes Fenster von drei aufeinanderfolgenden Datenpunkten im erweiterten Datenarray wird der Mittelwert berechnet und der geglätteten Datenliste (smoothed_data) hinzugefügt.
Extrahierung des remainder:

Die letzten beiden Datenpunkte des erweiterten Datenarrays werden als remainder gespeichert und für den nächsten Aufruf von smooth_data verwendet.
Hier ist der relevante Codeabschnitt nochmal im Detail:

python
Code kopieren
import numpy as np

def smooth_data(data, previous_remainder=None):
    if previous_remainder is not None:
        # Füge den previous_remainder an den Anfang des neuen Datenarrays an
        data = np.concatenate((previous_remainder, data))

    smoothed_data = []
    # Speichere die letzten beiden Datenpunkte des erweiterten Arrays
    remainder = data[-2:]

    for i in range(len(data) - 2):
        window = data[i:i + 3]
        mean_value = np.mean(window)
        smoothed_data.append(mean_value)

    # Gib die geglätteten Daten und den remainder zurück
    return smoothed_data, remainder
Beispiel:
Angenommen, das vorherige Array endete mit [4, 5, 6] und das neue Array beginnt mit [7, 8, 9].

Beim ersten Aufruf:

data = [1, 2, 3, 4, 5, 6]
previous_remainder ist None
smoothed_data = [2.0, 3.0, 4.0, 5.0]
remainder = [5, 6]
Beim zweiten Aufruf:

data = [7, 8, 9]
previous_remainder ist [5, 6]
Das erweiterte Array ist [5, 6, 7, 8, 9]
smoothed_data = [6.0, 7.0, 8.0]
remainder = [8, 9]
Dieser Prozess wird bei jedem Aufruf von smooth_data fortgesetzt, wobei der remainder des vorherigen Aufrufs verwendet wird, um eine konsistente Glättung zu gewährleisten

------------------------ Anmerkung -----------------------------

Wir müssen noch die Zeit der verschiedenen Arrays erfassen, damit die letzten Daten verworfen werden, wenn es zu lange dauert, bis das neue Array ankommt.
