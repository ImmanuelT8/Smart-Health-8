Wir versuchen nun den Code so umzuändern, dass wir 2 Threads haben, einen import Thread und einen Plotting Thread. 
Der Import Thread prüft permanent ob neue Daten verfügbar sind, der Plotting Thread plottet derweil die ganze Zeit. 



###### Step 1: Erzeugungs eines Q Threads der die Daten an eine Pufferliste anfügt: ######


class DataUpdater(QObject):
    data_updated = pyqtSignal()

    def __init__(self, df):
        super().__init__()
  
    def run(self):

        global df_old
        global list_data_ir_puffer
        df_old = None #dataframe der verwendet wird zum prüfen ob sich der importierte df verändert hat

        while True:
            # Überprüfe, ob neue Daten verfügbar sind
            # Hier kannst du die Logik implementieren, um zu überprüfen, ob neue Daten vorliegen

            from safe_to_excel import df as df_new
            if not df_new.equals(df_old):

                list_data_ir_puffer += df_new['Red'].tail(SAMPE_ARRAY).astype(float).tolist() # Fügt 100 neue Daten an die Liste IR Puffer an

                df_old = df_new

                if len(list_data_ir_puffer) > 500:
                    print("Die Anzahl der Einträge in der Liste IR Puffer ist größer als 500.")

            time.sleep(0.1)  # Beispiel: Wartezeit von 1 Sekunde


################## 2 Plotten der Liste #############################



    def update_plot_data_no_filter(self):
        global list_data_ir_puffer
        global SAMPE_ARRAY

        # Erhalte die ersten 100 Datenpunkte aus der Liste
        data_to_plot_IR = list_data_ir_puffer[:SAMPE_ARRAY]

        index = 0  # Startindex für den Datenabruf
        for data_point_IR in data_to_plot_IR:  #data_point: Diese Variable repräsentiert jeden einzelnen Datenpunkt, der während der Iteration durch data_to_plot geplottet wird.
            print(f"Datenpunkt {index + 1}: {data_point_IR}")  # Datenpunkt printen

            self.data = np.roll(self.data, -1)
            self.data[-1] = data_point_IR
            self.plot_item.setData(y=self.data)  # Aktualisieren der Daten des Plot-Items

            pg.QtCore.QCoreApplication.processEvents()  # Aktualisieren des Plot-Widgets
            time.sleep(0.017)  # Pause von 10 Millisekunden

            index += 1

        # Entferne die geplotteten Datenpunkte aus der Liste
        list_data_ir_puffer = list_data_ir_puffer[SAMPE_ARRAY:]


########################################### Varianblen Initalisieren in Plotter Window ########################

        # Initialisierung der Variablen für die Plotting-Funktionalität
        self.data_to_plot_IR = []
        self.data_point_IR = None


####################################### Zusammenfassung ############################################

Der Code sieht gut aus! Du hast die Variablen self.data_to_plot_IR und self.data_point_IR in der Klasse PlotterWindow korrekt initialisiert. 
Diese Variablen werden verwendet, um die zu plottenden Daten und den aktuellen Datenpunkt zu speichern.

In der update_plot_data_no_filter-Methode werden die ersten 100 Datenpunkte aus list_data_ir_puffer in data_to_plot_IR kopiert, 
und dann werden sie einzeln geplottet. Nach dem Plotten werden diese Datenpunkte aus list_data_ir_puffer entfernt, um sicherzustellen, 
dass nur neue Datenpunkte für das nächste Plotten verfügbar sind.

Der Code für den QThread DataUpdater sieht ebenfalls gut aus. Er überprüft kontinuierlich, ob ein neuer DataFrame verfügbar ist, 
und fügt die letzten 100 Datenpunkte des Red-Attributs dem list_data_ir_puffer hinzu. Wenn die Länge von list_data_ir_puffer mehr als 500 beträgt, 
wird eine Meldung ausgegeben.

########### Anmerkung Q Objekt ist falsch wir brauchen einen Q Thread ##############

class DataUpdater(QThread):
    data_updated = pyqtSignal()

    def __init__(self, df):
        super().__init__()
        self.df = df
        self.df_old = None  # DataFrame zur Überprüfung auf Änderungen
        self.list_data_ir_puffer = []  # Liste für neue Daten

    def run(self):
        while True:
            # Überprüfen, ob neue Daten verfügbar sind
            df_new = self.df  # Annahme: Hier würde der aktuelle DataFrame abgerufen werden
            if not df_new.equals(self.df_old):
                # Neue Daten vorhanden
                self.list_data_ir_puffer += df_new['Red'].tail(SAMPE_ARRAY).astype(float).tolist()
                self.df_old = df_new

                if len(self.list_data_ir_puffer) > 500:
                    print("Die Anzahl der Einträge in der Liste IR Puffer ist größer als 500.")

                # Signal senden, um anzuzeigen, dass neue Daten verfügbar sind
                self.data_updated.emit()

            time.sleep(0.1)  # Beispiel: Wartezeit von 0.1 Sekunden
####################



